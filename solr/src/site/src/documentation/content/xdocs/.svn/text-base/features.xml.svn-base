<?xml version="1.0"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN"
          "http://forrest.apache.org/dtd/document-v20.dtd">
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<document>

<header>
  <title>Introduction to The Solr Enterprise Search Server</title> 
</header> 

<body>

<section>
<title>Solr in a Nutshell</title>
  <p>
  Solr is a standalone enterprise search server with a web-services like API. You put documents in it (called "indexing") via XML over HTTP. You query it via HTTP GET and receive XML results.
  </p>
  <ul>
    <li> Advanced Full-Text Search Capabilities </li>
    <li> Optimized for High Volume Web Traffic </li>
    <li> Standards Based Open Interfaces - XML,JSON and HTTP </li>
    <li> Comprehensive HTML Administration Interfaces </li>
    <li> Server statistics exposed over JMX for monitoring </li>
    <li> Scalability - Efficient Replication to other Solr Search Servers </li>
    <li> Flexible and Adaptable with XML configuration </li>
    <li> Extensible Plugin Architecture </li>
  </ul>
</section>

<section>
<title>Solr Uses the Lucene Search Library and Extends it!</title>
  <ul>
    <li> A Real Data Schema, with Numeric Types, Dynamic Fields, Unique Keys </li>
    <li> Powerful Extensions to the Lucene Query Language </li>
    <li> Faceted Search and Filtering </li>
    <li> Advanced, Configurable Text Analysis </li>
    <li> Highly Configurable and User Extensible Caching </li>
    <li> Performance Optimizations </li>
    <li> External Configuration via XML </li>
    <li> An Administration Interface </li>
    <li> Monitorable Logging </li>
    <li> Fast Incremental Updates and Index Replication </li>
    <li> Highly Scalable Distributed search with sharded index across multiple hosts </li>
    <li> XML, CSV/delimited-text, and binary update formats </li>
    <li> Easy ways to pull in data from databases and XML files from local disk and HTTP sources </li>
    <li> Rich Document Parsing and Indexing (PDF, Word, HTML, etc) using Apache Tika </li>
    <li> Multiple search indices </li>
  </ul>
</section>

<section>
<title>Detailed Features</title>

  <section><title>Schema</title>
    <ul>
      <li>Defines the field types and fields of documents</li>
      <li>Can drive more intelligent processing</li>
      <li>Declarative Lucene Analyzer specification</li>
      <li>Dynamic Fields enables on-the-fly addition of new fields</li>
      <li>CopyField functionality allows indexing a single field multiple ways, or combining multiple fields into a single searchable field</li>
      <li>Explicit types eliminates the need for guessing types of fields</li>
      <li>External file-based configuration of stopword lists, synonym lists, and protected word lists</li>
      <li>Many additional text analysis components including word splitting, regex and sounds-like filters</li>
    </ul>
  </section>

  <section><title>Query</title>
    <ul>
      <li>HTTP interface with configurable response formats (XML/XSLT, JSON, Python, Ruby, PHP, Velocity, binary)</li>
      <li>Sort by any number of fields</li>
      <li>Advanced DisMax query parser for high relevancy results from user-entered queries</li> 
      <li>Highlighted context snippets</li>
      <li>Faceted Searching based on unique field values, explicit queries, or date ranges</li>
      <li>Multi-Select Faceting by tagging and selectively excluding filters</li>
      <li>Spelling suggestions for user queries</li>
      <li>More Like This suggestions for given document</li>
      <li>Function Query - influence the score by user specified complex functions of
	     numeric fields or query relevancy scores.</li>
      <li>Range filter over Function Query results</li>
      <li>Date Math - specify dates relative to "NOW" in queries and updates</li>
      <li>Dynamic search results clustering using Carrot2</li>
      <li>Numeric field statistics such as min, max, average, standard deviation </li>
      <li>Combine queries derived from different syntaxes</li>
      <li>Auto-suggest functionality</li>
      <li>Allow configuration of top results for a query, overriding normal scoring and sorting</li>
      <li>Performance Optimizations</li>
    </ul>
  </section>

  <section><title>Core</title>
    <ul>
      <li>Dynamically create and delete document collections without restarting</li>
      <li>Pluggable query handlers and extensible XML data format</li>
      <li>Pluggable user functions for Function Query</li>
      <li>Customizable component based request handler with distributed search support</li>
      <li>Document uniqueness enforcement based on unique key field</li>
      <li>Duplicate document detection, including fuzzy near duplicates</li>
      <li>Custom index processing chains, allowing document manipulation before indexing</li>
      <li>User configurable commands triggered on index changes</li>
      <li>Ability to control where docs with the sort field missing will be placed</li>
      <li>"Luke" request handler for corpus information</li>
    </ul>
  </section>

  <section><title>Caching</title>
    <ul>
      <li>Configurable Query Result, Filter, and Document cache instances</li>
      <li>Pluggable Cache implementations, including a lock free, high concurrency implementation</li>
      <li>Cache warming in background
        <ul><li> When a new searcher is opened, configurable searches are run against
            it in order to warm it up to avoid
            slow first hits.  During warming, the current searcher handles live requests.
        </li></ul>
      </li>
      <li>Autowarming in background
        <ul>
          <li>The most recently accessed items in the caches of the current
            searcher are re-populated in the new searcher, enabling high cache hit
            rates across index/searcher changes.</li>
        </ul>
      </li>
      <li>Fast/small filter implementation</li>
      <li>User level caching with autowarming support</li>
    </ul>
  </section>

  <section><title>Replication</title>
    <ul>
      <li>Efficient distribution of index parts that have changed</li>
      <li>Pull strategy allows for easy addition of searchers</li>
      <li>Configurable distribution interval allows tradeoff between timeliness and cache utilization</li>
      <li>Replication and automatic reloading of configuration files</li>
    </ul>
  </section>

  <section><title>Admin Interface</title>
    <ul>
      <li>Comprehensive statistics on cache utilization, updates, and queries</li>
      <li>Interactive schema browser that includes index statistics</li>
      <li>Replication monitoring</li>
      <li>Full logging control</li>
      <li>Text analysis debugger, showing result of every stage in an analyzer</li>
      <li>Web Query Interface w/ debugging output
        <ul>
          <li>parsed query output</li>
          <li>Lucene explain() document score detailing</li>
          <li>explain score for documents outside of the requested range to debug why a given document wasn't ranked higher.</li>
        </ul>
      </li>
    </ul>
  </section>



</section>

</body>
</document>
